#include "A.h"

struct edges_tuple{
    int a0;
    int a1;
};



void query () {

    int result = 0;
    
    
    
    //scan edges
    vector<edges_tuple> edges = vector<edges_tuple>();
    ifstream f0("edges");
    while (!f0.eof()) {
        edges_tuple tmp_tuple0;
    	
        f0 >> tmp_tuple0.a0;
    
    
        f0 >> tmp_tuple0.a1;
    
    
        edges.push_back(tmp_tuple0);
    }
    f0.close();
    
    cout << "edges[-1]=" << edges[edges.size()-1].a0 << "," << edges[edges.size()-1].a1 << "\n";
    
    
    //hash edges
    map<int, vector<edges_tuple> > edges0_hash;
    for (int i = 0; i < edges.size(); i++) {
    	if (edges0_hash.find(edges[i].a0) == edges0_hash.end()) {
    		edges0_hash[edges[i].a0] = vector<edges_tuple> ();
    	}
    	edges0_hash[edges[i].a0].push_back(edges[i]);
    }
    
    
    
    
    //loop over edges
    for (int index0 = 0; index0 < edges.size(); ++index0) {
        //if there is no match, continue
        if (edges0_hash.find(edges[index0].a1) == edges0_hash.end()) {
            continue;
        }
        vector<edges_tuple> table1 = edges0_hash[edges[index0].a1];
    
    
    
        //loop over final join results
        for (int index1 = 0; index1 < table1.size(); ++index1) {
            if (1) {
                
                ++result;
                
                
            }
        }
    }

    cout << "Found " << result << " tuples.\n";
    
    
}

int main() { query(); }
